package snotepad;

import images.ImageRef;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.net.URL;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import snotepad.helper.APICall;
import snotepad.helper.FileSize;
import snotepad.helper.ImageOpt;
import snotepad.helper.MessageBox;
import snotepad.helper.RegistryWorks;
import snotepad.helper.SettingProperties;
import static snotepad.helper.SettingProperties.KEY_AUTO_COPY;
import static snotepad.helper.SettingProperties.KEY_AUTO_PUBLIC_LINK;

/**
 *
 * @author FGroupIndonesia
 */
public class MainFrame extends javax.swing.JFrame {

    static String File_Argument_Complete_Path = null;

    URL resNew = ImageRef.class.getResource("new.png");
    ImageIcon iconNew = new ImageIcon(resNew);

    URL resOpen = ImageRef.class.getResource("open.png");
    ImageIcon iconOpen = new ImageIcon(resOpen);

    URL resSave = ImageRef.class.getResource("save.png");
    ImageIcon iconSave = new ImageIcon(resSave);

    URL resLock = ImageRef.class.getResource("lock.png");
    ImageIcon iconLock = new ImageIcon(resLock);

    URL resUnlock = ImageRef.class.getResource("unlock.png");
    ImageIcon iconUnlock = new ImageIcon(resUnlock);

    URL resSetting = ImageRef.class.getResource("config.png");
    ImageIcon iconSetting = new ImageIcon(resSetting);

    URL resAbout = ImageRef.class.getResource("info.png");
    ImageIcon iconAbout = new ImageIcon(resAbout);

    URL resLogo = ImageRef.class.getResource("logo.png");
    ImageIcon iconLogo = new ImageIcon(resLogo);

    URL resOK = ImageRef.class.getResource("ok.png");
    ImageIcon iconOK = new ImageIcon(resOK);

    URL resLoading = ImageRef.class.getResource("loading24.gif");
    ImageIcon iconLoading = new ImageIcon(resLoading);

    public MainFrame() {
        initComponents();
        setIconImage(iconLogo.getImage());
        applyDefaultToolbar(true);

        // hide the status bar at the moment
        label_status.setVisible(false);

        // register the extension openwith
        RegistryWorks.addOpenWithDefaultHandler();

        if (MainFrame.File_Argument_Complete_Path != null) {
            // we create a new tab
            addNewTabWithFileOpened(MainFrame.File_Argument_Complete_Path);
        }

    }

    private void setStatus(String message, int imageOpt) {
        label_status.setVisible(true);

        if (imageOpt == ImageOpt.EMPTY) {
            label_status.setIcon(null);
        } else if (imageOpt == ImageOpt.LOADING) {
            label_status.setIcon(iconLoading);
        } else {
            label_status.setIcon(iconOK);
        }

        label_status.setText(message);
    }

    private void applyDefaultToolbar(boolean defaultMode) {

        if (defaultMode) {
            menu_increase.setEnabled(false);
            menu_decrease.setEnabled(false);
            menu_wrap.setEnabled(false);
            menu_copy.setEnabled(false);

            btn_lock.setEnabled(false);
            btn_unlock.setEnabled(false);
            btn_save.setEnabled(false);
        } else {
            menu_increase.setEnabled(true);
            menu_decrease.setEnabled(true);
            menu_wrap.setEnabled(true);
            menu_copy.setEnabled(true);

            btn_lock.setEnabled(true);
            btn_unlock.setEnabled(true);
            btn_save.setEnabled(true);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        btn_new = new javax.swing.JButton(iconNew);
        btn_open = new javax.swing.JButton(iconOpen);
        btn_save = new javax.swing.JButton(iconSave);
        jSeparator3 = new javax.swing.JToolBar.Separator();
        btn_lock = new javax.swing.JButton(iconLock);
        btn_unlock = new javax.swing.JButton(iconUnlock);
        jSeparator4 = new javax.swing.JToolBar.Separator();
        btn_settings = new javax.swing.JButton(iconSetting);
        btn_about = new javax.swing.JButton(iconAbout);
        jSeparator5 = new javax.swing.JToolBar.Separator();
        jPanel1 = new javax.swing.JPanel();
        label_status = new javax.swing.JLabel();
        tabbedPanel = new javax.swing.JTabbedPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menu_new = new javax.swing.JMenuItem();
        menu_open = new javax.swing.JMenuItem();
        menu_save = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        menu_exit = new javax.swing.JMenuItem();
        menu_edit = new javax.swing.JMenu();
        menu_copy = new javax.swing.JMenuItem();
        menu_paste = new javax.swing.JMenuItem();
        menu_selectall = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        menu_settings = new javax.swing.JMenuItem();
        menu_view = new javax.swing.JMenu();
        menu_increase = new javax.swing.JMenuItem();
        menu_decrease = new javax.swing.JMenuItem();
        menu_wrap = new javax.swing.JMenuItem();
        menu_unlock = new javax.swing.JMenuItem();
        menu_about = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SNotepad");
        setPreferredSize(new java.awt.Dimension(600, 400));

        jToolBar1.setRollover(true);

        btn_new.setText("New");
        btn_new.setFocusable(false);
        btn_new.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btn_new.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btn_new.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_newActionPerformed(evt);
            }
        });
        jToolBar1.add(btn_new);

        btn_open.setText("Open");
        btn_open.setFocusable(false);
        btn_open.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btn_open.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btn_open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_openActionPerformed(evt);
            }
        });
        jToolBar1.add(btn_open);

        btn_save.setText("Save");
        btn_save.setFocusable(false);
        btn_save.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btn_save.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btn_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_saveActionPerformed(evt);
            }
        });
        jToolBar1.add(btn_save);
        jToolBar1.add(jSeparator3);

        btn_lock.setText("Lock");
        btn_lock.setFocusable(false);
        btn_lock.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btn_lock.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btn_lock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_lockActionPerformed(evt);
            }
        });
        jToolBar1.add(btn_lock);

        btn_unlock.setText("Unlock");
        btn_unlock.setFocusable(false);
        btn_unlock.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btn_unlock.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btn_unlock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_unlockActionPerformed(evt);
            }
        });
        jToolBar1.add(btn_unlock);
        jToolBar1.add(jSeparator4);

        btn_settings.setText("Settings");
        btn_settings.setFocusable(false);
        btn_settings.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btn_settings.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btn_settings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_settingsActionPerformed(evt);
            }
        });
        jToolBar1.add(btn_settings);

        btn_about.setText("About");
        btn_about.setFocusable(false);
        btn_about.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btn_about.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btn_about.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_aboutActionPerformed(evt);
            }
        });
        jToolBar1.add(btn_about);
        jToolBar1.add(jSeparator5);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.PAGE_START);

        jPanel1.setPreferredSize(new java.awt.Dimension(100, 20));
        jPanel1.setLayout(new java.awt.BorderLayout());

        label_status.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/loading24.gif"))); // NOI18N
        label_status.setText("status written here : xxxx");
        label_status.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 8, 1, 1));
        label_status.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        label_status.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                label_statusMouseClicked(evt);
            }
        });
        jPanel1.add(label_status, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_END);

        tabbedPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabbedPanelMouseClicked(evt);
            }
        });
        getContentPane().add(tabbedPanel, java.awt.BorderLayout.CENTER);

        jMenu1.setMnemonic('F');
        jMenu1.setText("File");

        menu_new.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menu_new.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/new.png"))); // NOI18N
        menu_new.setText("New");
        menu_new.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_newActionPerformed(evt);
            }
        });
        jMenu1.add(menu_new);

        menu_open.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menu_open.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/open.png"))); // NOI18N
        menu_open.setText("Open");
        menu_open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_openActionPerformed(evt);
            }
        });
        jMenu1.add(menu_open);

        menu_save.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menu_save.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/save.png"))); // NOI18N
        menu_save.setText("Save");
        menu_save.setEnabled(false);
        menu_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_saveActionPerformed(evt);
            }
        });
        jMenu1.add(menu_save);
        jMenu1.add(jSeparator1);

        menu_exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_DOWN_MASK));
        menu_exit.setText("Exit");
        menu_exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_exitActionPerformed(evt);
            }
        });
        jMenu1.add(menu_exit);

        jMenuBar1.add(jMenu1);

        menu_edit.setMnemonic('E');
        menu_edit.setText("Edit");
        menu_edit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menu_editMouseClicked(evt);
            }
        });

        menu_copy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menu_copy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/copy.png"))); // NOI18N
        menu_copy.setText("Copy");
        menu_copy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_copyActionPerformed(evt);
            }
        });
        menu_edit.add(menu_copy);

        menu_paste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menu_paste.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/paste.png"))); // NOI18N
        menu_paste.setText("Paste");
        menu_paste.setEnabled(false);
        menu_paste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_pasteActionPerformed(evt);
            }
        });
        menu_edit.add(menu_paste);

        menu_selectall.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menu_selectall.setText("Select All");
        menu_selectall.setEnabled(false);
        menu_selectall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_selectallActionPerformed(evt);
            }
        });
        menu_edit.add(menu_selectall);
        menu_edit.add(jSeparator2);

        menu_settings.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menu_settings.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/config.png"))); // NOI18N
        menu_settings.setText("Settings");
        menu_settings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_settingsActionPerformed(evt);
            }
        });
        menu_edit.add(menu_settings);

        jMenuBar1.add(menu_edit);

        menu_view.setMnemonic('V');
        menu_view.setText("View");
        menu_view.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menu_viewMouseClicked(evt);
            }
        });
        menu_view.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_viewActionPerformed(evt);
            }
        });

        menu_increase.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_EQUALS, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menu_increase.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/aup.png"))); // NOI18N
        menu_increase.setText("Increase Font");
        menu_increase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_increaseActionPerformed(evt);
            }
        });
        menu_view.add(menu_increase);

        menu_decrease.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_MINUS, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menu_decrease.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/adown.png"))); // NOI18N
        menu_decrease.setText("Decrease Font");
        menu_decrease.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_decreaseActionPerformed(evt);
            }
        });
        menu_view.add(menu_decrease);

        menu_wrap.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menu_wrap.setText("Wrap Word");
        menu_wrap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_wrapActionPerformed(evt);
            }
        });
        menu_view.add(menu_wrap);

        menu_unlock.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_U, java.awt.event.InputEvent.ALT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menu_unlock.setText("Unlock");
        menu_unlock.setEnabled(false);
        menu_unlock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_unlockActionPerformed(evt);
            }
        });
        menu_view.add(menu_unlock);

        jMenuBar1.add(menu_view);

        menu_about.setMnemonic('B');
        menu_about.setText("About");
        menu_about.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menu_aboutMouseClicked(evt);
            }
        });
        jMenuBar1.add(menu_about);

        setJMenuBar(jMenuBar1);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void menu_increaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_increaseActionPerformed

        getActivePanel().makeBiggerFont();

    }//GEN-LAST:event_menu_increaseActionPerformed

    private void btn_newActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_newActionPerformed
        addNewTab();
    }//GEN-LAST:event_btn_newActionPerformed

    private void menu_newActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_newActionPerformed
        addNewTab();
    }//GEN-LAST:event_menu_newActionPerformed

    private void menu_openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_openActionPerformed
        openDialog();
    }//GEN-LAST:event_menu_openActionPerformed

    private void openDialog() {
        FileFilter filter = new FileNameExtensionFilter("SNotepad File", "snpad");

        JFileChooser jfc = new JFileChooser();
        jfc.setFileFilter(filter);
        jfc.setDialogTitle("Select *.snpad file...");
        jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);

        int retVal = jfc.showOpenDialog(this);

        if (retVal == JFileChooser.APPROVE_OPTION) {
            // selecting file
            // reading content and opening inside the snotepad
            readFromFile(jfc.getSelectedFile());

        } else {
            // cancel
        }
    }

    private void readFromFile(File object) {
        try {

            String nama = object.getName();

            BufferedReader reader = new BufferedReader(new FileReader(object));
            StringBuilder builder = new StringBuilder();
            String line;

            while ((line = reader.readLine()) != null) {
                builder.append(line);
            }

            addNewTab();
            getActivePanel().setCodeText(builder.toString());
            // show the text that has been translated
            String n = objTranslator.translateFromCode(getActivePanel().getCodeText());
            getActivePanel().setNewOriginalText(n);
            getActivePanel().changeTitleOfTab(nama);
            getActivePanel().setFileObject(object);

            // changing the button
            // back to the original state
            btn_lock.setEnabled(true);
            btn_unlock.setEnabled(false);

        } catch (Exception ex) {
            ex.printStackTrace();
            System.err.println("Error while reading snpad file...");
        }
    }

    APICall webapi = new APICall();

    private void btn_lockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_lockActionPerformed
        // encrypt text into code
        String n = objTranslator.translateIntoCode(getActivePanel().getOriginalText());
        getActivePanel().setCodeText(n);
        getActivePanel().lock();

        // changing the button
        btn_lock.setEnabled(false);
        btn_unlock.setEnabled(true);

        // check does it has a name?
        // if so update the content (saved it)
        if (getActivePanel().getFileObject() != null) {
            writeToFile(getActivePanel().getFileObject());
        }

        if (SettingProperties.isExist()) {
            // get the status of :
            // auto copy
            // auto public link

            String _auto_copy = SettingProperties.loadData(KEY_AUTO_COPY);
            String _auto_public_link = SettingProperties.loadData(KEY_AUTO_PUBLIC_LINK);

            if (_auto_public_link != null) {
                if (_auto_public_link.equalsIgnoreCase("true")) {

                    if (isAnyTab()) {

                        // check whether this has been saved ?
                        if (!getActivePanel().isSaved()) {
                            boolean want = MessageBox.confirm("Save File.", "Give a file name first...");

                            if (want) {

                                if (saveDialog()) {
                                    getActivePanel().setSavedStatus(true);
                                }
                            }

                        }

                        if (getActivePanel().isSaved()) {
                            // send the file to the server
                            webapi.post(getActivePanel().getFileObject());

                            setStatus("URL successfully generated! (" + webapi.getAsRespondObject().getUrl() + ")", ImageOpt.SUCCESS);

                            if (_auto_copy != null) {
                                if (_auto_copy.equalsIgnoreCase("true")) {
                                    autoCopyContent();
                                    setStatus("URL is Generated! Click to Copied to clipboard! (" + webapi.getAsRespondObject().getUrl() + ")", ImageOpt.SUCCESS);
                                }
                            }

                        }

                    }
                }
            }

        }

    }//GEN-LAST:event_btn_lockActionPerformed

    private void btn_unlockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_unlockActionPerformed
        // decrypting text from code
        String n = objTranslator.translateFromCode(getActivePanel().getCodeText());
        getActivePanel().setOriginalText(n);
        getActivePanel().lock();

        btn_lock.setEnabled(true);
        btn_unlock.setEnabled(false);


    }//GEN-LAST:event_btn_unlockActionPerformed

    private void tabbedPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabbedPanelMouseClicked
        if (SwingUtilities.isRightMouseButton(evt)) {
            showPopupMenu(evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_tabbedPanelMouseClicked

    private void btn_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_saveActionPerformed

        if(getActivePanel().getTitle().contains(".snpad")){
            // this file is already exist in the laptop
            writeToFile(getActivePanel().getFileObject());
        }else if (saveDialog()) {
            String fsize = getFileSize(getActivePanel().getFileObject(), FileSize.Automatic);
            setStatus("successfully saved! | file size : " + fsize, ImageOpt.SUCCESS);
        }

    }//GEN-LAST:event_btn_saveActionPerformed

    private String getFileSize(File obj, int needed) {
        double fileSizeInBytes = obj.length();
        double fileSizeInKB = fileSizeInBytes / 1024.0;
        double fileSizeInMB = fileSizeInKB / 1024.0;

        double n = 0;
        String text = null;
        int statUsed = needed;

        if (needed == FileSize.Byte) {
            n = fileSizeInBytes;
        } else if (needed == FileSize.KiloByte) {
            n = fileSizeInKB;
        } else if (needed == FileSize.MegaByte) {
            n = fileSizeInMB;
        } else {
            // this is automatic feature
            if (fileSizeInBytes < 1000) {
                n = fileSizeInBytes;
                statUsed = FileSize.Byte;
            } else if (fileSizeInBytes >= 1000 && fileSizeInKB < 1000) {
                n = fileSizeInKB;
                statUsed = FileSize.KiloByte;
            } else if (fileSizeInKB >= 1000) {
                n = fileSizeInMB;
                statUsed = FileSize.MegaByte;
            }

        }

        if (statUsed == FileSize.Byte) {
            text = n + "b.";
        } else if (statUsed == FileSize.KiloByte) {
            text = n + "kb.";
        } else if (statUsed == FileSize.MegaByte) {
            text = n + "mb.";
        }

        return text;
    }

  
    private boolean saveDialog() {

        boolean saved = false;
        FileFilter filter = new FileNameExtensionFilter("SNotepad File", "snpad");

        JFileChooser jfc = new JFileChooser();
        jfc.setFileFilter(filter);
        jfc.setDialogTitle("Select *.snpad file...");
        jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);

        int retVal = jfc.showSaveDialog(this);

        if (retVal == JFileChooser.APPROVE_OPTION) {

            // save the text to the file
            writeToFile(jfc.getSelectedFile());

            saved = true;

        }

        return saved;
    }

    private void btn_aboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_aboutActionPerformed

        showAboutDialog();
    }//GEN-LAST:event_btn_aboutActionPerformed

    private void menu_aboutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menu_aboutMouseClicked

        showAboutDialog();
    }//GEN-LAST:event_menu_aboutMouseClicked

    private void menu_decreaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_decreaseActionPerformed
        getActivePanel().makeSmallerFont();
    }//GEN-LAST:event_menu_decreaseActionPerformed

    private void menu_wrapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_wrapActionPerformed
        getActivePanel().toggleWrapMode();
    }//GEN-LAST:event_menu_wrapActionPerformed

    private void menu_unlockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_unlockActionPerformed

        if (menu_unlock.getText().equalsIgnoreCase("lock")) {
            // encrypt text into code
            String n = objTranslator.translateIntoCode(getActivePanel().getOriginalText());
            getActivePanel().setCodeText(n);
        } else {
            // decrypt text into code
            String n = objTranslator.translateFromCode(getActivePanel().getOriginalText());
            getActivePanel().setCodeText(n);
        }

        getActivePanel().lock();


    }//GEN-LAST:event_menu_unlockActionPerformed

    private void menu_viewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_viewActionPerformed


    }//GEN-LAST:event_menu_viewActionPerformed

    private void menu_viewMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menu_viewMouseClicked

        // changing the title of unlocking depend 
        // upon tabs that currently active
        if (isAnyTab()) {

            menu_unlock.setEnabled(true);

            // read the tab opened
            if (getActivePanel().isLockOrNot()) {
                menu_unlock.setText("Unlock");

            } else {
                menu_unlock.setText("Lock");
            }

        } else {
            // no tab
            menu_unlock.setEnabled(false);
        }

    }//GEN-LAST:event_menu_viewMouseClicked

    public void autoCopyContent() {
        copyToClipboard(getActivePanel().getCodeText());
    }

    private static void copyToClipboard(String text) {
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        StringSelection selection = new StringSelection(text);
        clipboard.setContents(selection, null);
        System.out.println("Text copied to clipboard: " + text);
    }

    private void menu_settingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_settingsActionPerformed

        openSettingsDialog();

    }//GEN-LAST:event_menu_settingsActionPerformed

    private void menu_copyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_copyActionPerformed


    }//GEN-LAST:event_menu_copyActionPerformed

    private void menu_pasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_pasteActionPerformed

        if (isAnyTab()) {
            getActivePanel().pasteText();
        }

    }//GEN-LAST:event_menu_pasteActionPerformed

    private void menu_selectallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_selectallActionPerformed

        if (isAnyTab()) {
            getActivePanel().highlightText();
        }

    }//GEN-LAST:event_menu_selectallActionPerformed

    private void menu_editMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menu_editMouseClicked

        if (isAnyTab()) {

            if (!getActivePanel().isEmptyEditor()) {
                menu_selectall.setEnabled(true);
            }

            if (anyDataClipboard()) {
                menu_paste.setEnabled(true);
            }
        }

    }//GEN-LAST:event_menu_editMouseClicked

    private void menu_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_saveActionPerformed

        saveDialog();

    }//GEN-LAST:event_menu_saveActionPerformed

    private void btn_openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_openActionPerformed

        openDialog();

    }//GEN-LAST:event_btn_openActionPerformed

    private void btn_settingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_settingsActionPerformed

        openSettingsDialog();

    }//GEN-LAST:event_btn_settingsActionPerformed

    private void menu_exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_exitActionPerformed

        // automatically close everything 
        System.exit(0);

    }//GEN-LAST:event_menu_exitActionPerformed

    private void label_statusMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_label_statusMouseClicked

        if(label_status.getText().contains("Generated")){
            // copy the link to clipboard
            copyToClipboard(webapi.getAsRespondObject().getUrl());
        }
        
    }//GEN-LAST:event_label_statusMouseClicked

    private void openSettingsDialog() {

        SettingDialog win = new SettingDialog(this, true);
        win.setVisible(true);

    }

    private void writeToFile(File object) {

        try {
            File objectExt = null;

            if (!object.getName().contains(".snpad")) {
                objectExt = new File(object.getParent(), object.getName() + ".snpad");
            } else {
                objectExt = object;
            }

            BufferedWriter writer = new BufferedWriter(new FileWriter(objectExt));
            if (!getActivePanel().isLockOrNot()) {
                // translate first to code
                String n = objTranslator.translateIntoCode(getActivePanel().getOriginalText());
                getActivePanel().setCodeText(n);
                getActivePanel().lock();

                btn_lock.setEnabled(false);
                btn_unlock.setEnabled(true);

            }

            writer.write(getActivePanel().getCodeText());
            writer.close();

            // turn off the save button
            btn_save.setEnabled(false);
            menu_save.setEnabled(false);

            // update the title
            String nama = objectExt.getName();
            String namaLengkep = null;
            if (!nama.contains(".snpad")) {
                namaLengkep = nama + ".snpad";
                getActivePanel().changeTitleOfTab(namaLengkep);
            } else {
                namaLengkep = nama;
                getActivePanel().changeTitleOfTab(nama);
            }

            getActivePanel().setFileObject(objectExt);
            getActivePanel().setFileName(namaLengkep);
            getActivePanel().setSavedStatus(true);

            System.out.println("We just saved : " + getActivePanel().getOriginalText());
            
        } catch (Exception ex) {
            ex.printStackTrace();
            System.err.println("Error when saving file...");
        }

    }

    private boolean anyDataClipboard() {
        try {
            String text = (String) Toolkit.getDefaultToolkit().getSystemClipboard().getData(DataFlavor.stringFlavor);

            if (text != null) {
                return true;
            }

        } catch (Exception ex) {
            System.err.println("Error while getting data from clipboard.");
        }

        return false;
    }

    private void showAboutDialog() {
        AboutDialog dialog = new AboutDialog(this, true);
        dialog.setVisible(true);
    }

    private JPopupMenu popupMenu;

    private void showPopupMenu(int x, int y) {
        popupMenu = new JPopupMenu();

        final int x1 = x;
        final int y1 = y;

        JMenuItem closeTabItem = new JMenuItem("Close This Tab Only");
        closeTabItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                int tabIndex = tabbedPanel.indexAtLocation(x1, y1);
                if (tabIndex != -1) {
                    // re-index the number
                    reIndexPanel(tabIndex);

                    tabbedPanel.remove(tabIndex);
                    applyDefaultToolbarIfAnyTabs();
                }
            }
        });
        popupMenu.add(closeTabItem);

        JMenuItem closeAllTabsItem = new JMenuItem("Close All Tabs");
        closeAllTabsItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                tabbedPanel.removeAll();
                applyDefaultToolbarIfAnyTabs();

            }
        });
        popupMenu.add(closeAllTabsItem);

        popupMenu.show(tabbedPanel, x, y);
    }

    private void applyDefaultToolbarIfAnyTabs() {
        if (isAnyTab()) {
            applyDefaultToolbar(false);
        } else {
            menu_save.setEnabled(false);
            applyDefaultToolbar(true);
        }
    }

    private boolean isAnyTab() {
        if (tabbedPanel.getTabCount() > 0) {
            return true;
        }

        return false;
    }

    private void reIndexPanel(int removedIndex) {
        int many = tabbedPanel.getTabCount();

        for (int i = removedIndex; i < many; i++) {

            CustomPanel2 panel = (CustomPanel2) tabbedPanel.getComponentAt(i);
            panel.decreaseIndexNum();
            
        }

    }

    private CustomPanel2 getActivePanel() {
        CustomPanel2 panel = (CustomPanel2) tabbedPanel.getSelectedComponent();
        // we update the existing data tabbed pane
        panel.setTabbedPanel(tabbedPanel);

        return panel;
    }

    //ArrayList<CustomPanel2> dataPanel = new ArrayList<CustomPanel2>();
    private void addNewTabWithFileOpened(String fileCompletePath) {

        // activating save menu
        menu_save.setEnabled(true);

        // opening lock of toolbar
        applyDefaultToolbar(false);

        readFromFile(new File(fileCompletePath));

        // switch focus
        showFocusNewTab();

    }

    private void addNewTab() {
        // activating save menu
        menu_save.setEnabled(true);

        // opening lock of toolbar
        applyDefaultToolbar(false);

        // adding new Panel into tabbed panel
        int nomer = tabbedPanel.getTabCount();

        CustomPanel2 panel1 = new CustomPanel2(tabbedPanel, nomer, menu_unlock, menu_save, btn_save);
        tabbedPanel.add("- new -", panel1);
        //dataPanel.add(panel1);

        // switch focus
        showFocusNewTab();
    }

    private void showFocusNewTab() {
        tabbedPanel.setSelectedIndex(tabbedPanel.getTabCount() - 1);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        runMe();
    }

    public static void runMeWithFileOpened(String filePath) {

        // this file path will be read its content 
        // and displayed into the tab
        MainFrame.File_Argument_Complete_Path = filePath;
        runMe();
    }

    public static void runMe() {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception ex) {
            System.err.println("error first time launching SNotepad!");
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    private Translator objTranslator = new Translator();

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_about;
    private javax.swing.JButton btn_lock;
    private javax.swing.JButton btn_new;
    private javax.swing.JButton btn_open;
    private javax.swing.JButton btn_save;
    private javax.swing.JButton btn_settings;
    private javax.swing.JButton btn_unlock;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JToolBar.Separator jSeparator5;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel label_status;
    private javax.swing.JMenu menu_about;
    private javax.swing.JMenuItem menu_copy;
    private javax.swing.JMenuItem menu_decrease;
    private javax.swing.JMenu menu_edit;
    private javax.swing.JMenuItem menu_exit;
    private javax.swing.JMenuItem menu_increase;
    private javax.swing.JMenuItem menu_new;
    private javax.swing.JMenuItem menu_open;
    private javax.swing.JMenuItem menu_paste;
    private javax.swing.JMenuItem menu_save;
    private javax.swing.JMenuItem menu_selectall;
    private javax.swing.JMenuItem menu_settings;
    private javax.swing.JMenuItem menu_unlock;
    private javax.swing.JMenu menu_view;
    private javax.swing.JMenuItem menu_wrap;
    private javax.swing.JTabbedPane tabbedPanel;
    // End of variables declaration//GEN-END:variables
}
