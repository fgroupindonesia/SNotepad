package snotepad;

import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import javax.swing.JTabbedPane;

/**
 *
 * @author FGroupIndonesia
 */
public class CustomPanel2 extends javax.swing.JPanel {

    private int nomer;
    private String originalText;
    private String codeText;
    private boolean locked;
    private boolean saved;
    private String fileName;
    private String completeLocation;
    private StringBuffer stb = new StringBuffer();
    private JTabbedPane tabbedPanel;

    public void setSavedStatus(boolean b) {
        saved = b;
        
        addMark();
    }

    public void changeTitleOfTab(String newName) {
        tabbedPanel.setTitleAt(nomer, newName);
    }

    public void appendText(String n) {

        stb.append(n);
        this.setOriginalText(stb.toString());

        setSavedStatus(false);

        addMark();
    }

    private boolean isSaved() {
        return saved;
    }

    private void addMark() {
        String title = tabbedPanel.getTitleAt(nomer);

        if (!title.contains("*")) {
            if (!isSaved()) {
                changeTitleOfTab(title + "*");
            }
        }else{
            if(isSaved()){
                changeTitleOfTab(title.replace("*", ""));
            }
        }

    }

    private void clear() {
        stb = new StringBuffer();
        this.setOriginalText(stb.toString());
    }

    public void lock() {
        // this will automatically toggle
        locked = !locked;
        refreshRender();
    }

    private void refreshRender() {
        if (isLockOrNot()) {
            jEditorPane1.setText(this.getCodeText());
        } else {
            jEditorPane1.setText(this.getOriginalText());
        }
    }

    /**
     * @return the originalText
     */
    public String getOriginalText() {
        return originalText;
    }

    /**
     * @param originalText the originalText to set
     */
    public void setOriginalText(String originalText) {
        this.originalText = originalText;
    }

    /**
     * @return the codeText
     */
    public String getCodeText() {
        return codeText;
    }

    /**
     * @param codeText the codeText to set
     */
    public void setCodeText(String codeText) {
        this.codeText = codeText;
    }

    /**
     * @return the lockOrNot
     */
    public boolean isLockOrNot() {
        return locked;
    }

    /**
     * @param lockOrNot the lockOrNot to set
     */
    public void setLockOrNot(boolean lockOrNot) {
        this.locked = lockOrNot;
    }

    /**
     * @return the fileName
     */
    public String getFileName() {
        return fileName;
    }

    /**
     * @param fileName the fileName to set
     */
    public void setFileName(String fileName) {
        this.fileName = fileName;
    }

    /**
     * @return the completeLocation
     */
    public String getCompleteLocation() {
        return completeLocation;
    }

    /**
     * @param completeLocation the completeLocation to set
     */
    public void setCompleteLocation(String completeLocation) {
        this.completeLocation = completeLocation;
    }

    /**
     * Creates new form CustomPanel2
     */
    public CustomPanel2() {
        initComponents();
        applyDropable();
    }

    public CustomPanel2(JTabbedPane jtb, int nomerX) {
        initComponents();
        tabbedPanel = jtb;
        nomer = nomerX;
        applyDropable();
    }

    private void applyDropable() {

        jEditorPane1.setDropTarget(new DropTarget() {
            public synchronized void drop(DropTargetDropEvent evt) {
                try {

                    evt.acceptDrop(DnDConstants.ACTION_COPY);
                    Transferable transferable = evt.getTransferable();

                    if (transferable.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) {
                        java.util.List<File> files = (java.util.List<File>) transferable.getTransferData(DataFlavor.javaFileListFlavor);
                        if (!files.isEmpty()) {
                            File file = files.get(0);
                            readFileContent(file);
                        }
                    }

                } catch (Exception ex) {
                    System.err.println("");
                }
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.LINE_AXIS));

        jEditorPane1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jEditorPane1KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jEditorPane1KeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jEditorPane1KeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(jEditorPane1);

        add(jScrollPane1);
    }// </editor-fold>//GEN-END:initComponents

    private void jEditorPane1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jEditorPane1KeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_SHIFT) {
            shiftPressed = false;
        } else if (evt.getKeyCode() == KeyEvent.VK_CONTROL) {
            ctrlPressed = false;
        } else if (ctrlPressed && evt.getKeyCode() == KeyEvent.VK_A) {
            // If Ctrl is pressed and 'A' is pressed/released subsequently, 
            // do something here (e.g., select all text in a JTextArea)
            jEditorPane1.selectAll();
        }


    }//GEN-LAST:event_jEditorPane1KeyReleased

    private boolean isBackSpace(KeyEvent evt) {
        boolean t = false;
        int number = evt.getKeyChar();

        if (number == 8) {
            t = true;
            System.out.println("Backspace");
        }

        return t;
    }

    private void jEditorPane1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jEditorPane1KeyTyped
// Consume the event to prevent further processing by other listeners
        evt.consume();
    }//GEN-LAST:event_jEditorPane1KeyTyped

    boolean ctrlPressed;
    boolean shiftPressed;
    boolean selectAllPressed;

    private void jEditorPane1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jEditorPane1KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_SHIFT) {
            shiftPressed = true;
        } else if (evt.getKeyCode() == KeyEvent.VK_CONTROL) {
            ctrlPressed = true;
        } else if (evt.getKeyCode() != KeyEvent.VK_BACK_SPACE && evt.getKeyCode() != KeyEvent.VK_SHIFT) {
            if ((!ctrlPressed || evt.getKeyCode() != KeyEvent.VK_C) && !isBackSpace(evt) && evt.getKeyCode() != KeyEvent.VK_X
                    && (!ctrlPressed || evt.getKeyCode() != KeyEvent.VK_A)) {

                char typedChar = evt.getKeyChar();

                if (Character.isAlphabetic(typedChar)) {
                    // Use getKeyText to get uppercase characters if Shift is pressed
                    if (shiftPressed) {
                        typedChar = evt.getKeyText(evt.getKeyCode()).charAt(0);
                    }
                }

                System.out.println("we got " + typedChar);

                if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                    this.appendText("\n");
                    evt.consume();

                } else {
                    this.appendText(String.valueOf(typedChar));
                }

                if (!isLockOrNot()) {
                    jEditorPane1.setText(this.getOriginalText());
                } else {
                    jEditorPane1.setText(this.getCodeText());
                }

            } else if (ctrlPressed && evt.getKeyCode() == KeyEvent.VK_A) {
                selectAllPressed = true;
                //System.out.println("sampe nih!");
            }
        } else if (selectAllPressed && evt.getKeyCode() == KeyEvent.VK_BACK_SPACE) {
            clear();
            selectAllPressed = false;
        } else {
            // when backspace pressed
            if (this.getOriginalText().length() != 0) {
                this.backspace();
            }
        }
    }//GEN-LAST:event_jEditorPane1KeyPressed

    private void readFileContent(File file) {
        try {

            BufferedReader reader = new BufferedReader(new FileReader(file));

            String line;
            while ((line = reader.readLine()) != null) {
                appendText(line);
                appendText("\n");
            }

            this.jEditorPane1.setText(getOriginalText());

        } catch (Exception e) {
            System.err.println("Error when reading file content...");
        }
    }

    private boolean isEmptyEditor() {
        if (jEditorPane1.getText().length() == 0) {
            return true;
        }

        return false;
    }

    private void backspace() {
        // deleting one char from the original text
        stb = new StringBuffer();
        this.appendText(
                getOriginalText().substring(0, getOriginalText().length() - 1));

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
