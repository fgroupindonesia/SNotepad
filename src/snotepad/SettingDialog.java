package snotepad;

import snotepad.helper.RegistryWorks;
import snotepad.helper.SettingProperties;
import static snotepad.helper.SettingProperties.KEY_AUTORUNS;
import static snotepad.helper.SettingProperties.KEY_AUTO_COPY;
import static snotepad.helper.SettingProperties.KEY_AUTO_PUBLIC_LINK;

/**
 * Project : SNotepad
 * File : SettingDialog.java
 * @author FGroupIndonesia
 */
public class SettingDialog extends javax.swing.JDialog {

    /**
     * Creates new form SettingDialog
     */
    public SettingDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        label_info_publiclink.setVisible(false);

        if (SettingProperties.isExist()) {
            // start reading the data
            String _autoruns = SettingProperties.loadData(KEY_AUTORUNS);
            String _auto_copy = SettingProperties.loadData(KEY_AUTO_COPY);
            String _auto_public_link = SettingProperties.loadData(KEY_AUTO_PUBLIC_LINK);
        
            if(_autoruns!=null)
            if(_autoruns.equalsIgnoreCase("true")){
                checkbox_autoruns.setSelected(true);
            }else{
                checkbox_autoruns.setSelected(false);
            }
            
            if(_auto_copy!=null)
            if(_auto_copy.equalsIgnoreCase("true")){
                checkbox_autocopy.setSelected(true);
            }else{
                checkbox_autocopy.setSelected(false);
            }
            
            if(_auto_public_link!=null)
             if(_auto_public_link.equalsIgnoreCase("true")){
                checkbox_autolink.setSelected(true);
            }else{
                checkbox_autolink.setSelected(false);
            }
        
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        checkbox_autolink = new javax.swing.JCheckBox();
        checkbox_autoruns = new javax.swing.JCheckBox();
        checkbox_autocopy = new javax.swing.JCheckBox();
        label_info_publiclink = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Settings");

        checkbox_autolink.setText("Auto Public Link Conversion* when Locked");
        checkbox_autolink.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkbox_autolinkActionPerformed(evt);
            }
        });

        checkbox_autoruns.setText("Autoruns on Windows Start");
        checkbox_autoruns.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkbox_autorunsActionPerformed(evt);
            }
        });

        checkbox_autocopy.setText("Autocopy content when Locked.");
        checkbox_autocopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkbox_autocopyActionPerformed(evt);
            }
        });

        label_info_publiclink.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        label_info_publiclink.setText("*public link conversion requires internet connection when activated.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(checkbox_autocopy)
                    .addComponent(checkbox_autoruns)
                    .addComponent(checkbox_autolink)
                    .addComponent(label_info_publiclink, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(checkbox_autolink)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(checkbox_autoruns)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(checkbox_autocopy)
                .addGap(18, 18, 18)
                .addComponent(label_info_publiclink)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void checkbox_autolinkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkbox_autolinkActionPerformed

        if (checkbox_autolink.isSelected()) {
            label_info_publiclink.setVisible(true);
            SettingProperties.writeData(KEY_AUTO_PUBLIC_LINK, "true");
        } else {
            label_info_publiclink.setVisible(false);
            SettingProperties.writeData(KEY_AUTO_PUBLIC_LINK, "false");
        }

        System.out.println("Auto Public Link settings updated!");
        
    }//GEN-LAST:event_checkbox_autolinkActionPerformed

    private void checkbox_autorunsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkbox_autorunsActionPerformed

        if (checkbox_autoruns.isSelected()) {
            // make the autoruns on registry
            RegistryWorks.addAutoruns();
            SettingProperties.writeData(KEY_AUTORUNS, "true");

        } else {
            // disable it from registry
            RegistryWorks.deleteAutoruns();
            SettingProperties.writeData(KEY_AUTORUNS, "false");

        }

    }//GEN-LAST:event_checkbox_autorunsActionPerformed

    private void checkbox_autocopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkbox_autocopyActionPerformed

        if (checkbox_autocopy.isSelected()) {
            SettingProperties.writeData(KEY_AUTO_COPY, "true");
        } else {
            SettingProperties.writeData(KEY_AUTO_COPY, "false");
        }


    }//GEN-LAST:event_checkbox_autocopyActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SettingDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SettingDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SettingDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SettingDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                SettingDialog dialog = new SettingDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox checkbox_autocopy;
    private javax.swing.JCheckBox checkbox_autolink;
    private javax.swing.JCheckBox checkbox_autoruns;
    private javax.swing.JLabel label_info_publiclink;
    // End of variables declaration//GEN-END:variables
}
